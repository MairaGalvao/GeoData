{"ast":null,"code":"var _jsxFileName = \"/home/maira/Desktop/netLumeProject/react-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { divIcon } from 'leaflet';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [activeInfo, setActiveInfo] = useState(null);\n  const [position, setPosition] = useState([0, 0]);\n  const [featuresArray, setFeaturesArray] = useState();\n  const [defaultColor, setDefaultColor] = useState(true);\n\n  async function getData() {\n    const response = await fetch('http://localhost:5000/mapview');\n    const jsonResponse = await response.json();\n    const teste = jsonResponse.features;\n    var featuresArray = jsonResponse.features.slice(1, 7); // todo remove slice!\n\n    setFeaturesArray(featuresArray);\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const markerHtmlStyles = color => {\n    if (defaultColor == false) {\n      var iconColor = color;\n    } else {\n      iconColor = 'grey';\n    }\n\n    return `background-color: ${iconColor};\n    width: 1rem;\n    height: 1rem;\n    display: block;\n    left: -1.5rem;\n    top: -1.5rem;\n    position: relative;\n    border-radius: 3rem 3rem 0;\n    transform: rotate(45deg);\n    border: 1px solid #FFFFFF`;\n  };\n\n  const icon = color => {\n    const obejctStyle = markerHtmlStyles(color);\n    const htmlString = `<span style=\"${obejctStyle}\" />`;\n    return divIcon({\n      className: \"my-custom-pin\",\n      iconAnchor: [0, 24],\n      labelAnchor: [-6, 0],\n      popupAnchor: [0, -36],\n      html: htmlString\n    });\n  };\n\n  const switchColors = () => {\n    setDefaultColor(!defaultColor);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: switchColors,\n      children: \" Switch \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [8.382046, 11.6146463],\n      center: position,\n      zoom: 1,\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://stadiamaps.com/\\\">Stadia Maps</a>, \\xA9 <a href=\\\"https://openmaptiles.org/\\\">OpenMapTiles</a> \\xA9 <a href=\\\"http://openstreetmap.org\\\">OpenStreetMap</a> contributors\",\n        url: \"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 8\n      }, this), featuresArray && featuresArray.map((featureObject, idx1) => {\n        return featureObject.geometry.coordinates.map((singleCoordinate, idx2) => {\n          const myid = idx1 + '_' + idx2;\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: singleCoordinate,\n            icon: icon(featureObject.properties.color)\n          }, myid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 16\n          }, this);\n        });\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 2\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"ZGHWgVHUAu6QbUqfRwWuhOyw14g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/maira/Desktop/netLumeProject/react-app/src/App.js"],"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","divIcon","App","activeInfo","setActiveInfo","position","setPosition","featuresArray","setFeaturesArray","defaultColor","setDefaultColor","getData","response","fetch","jsonResponse","json","teste","features","slice","markerHtmlStyles","color","iconColor","icon","obejctStyle","htmlString","className","iconAnchor","labelAnchor","popupAnchor","html","switchColors","map","featureObject","idx1","geometry","coordinates","singleCoordinate","idx2","myid","properties"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport { divIcon } from 'leaflet';\nimport './App.css';\n\n\nfunction App() {\n  const [ activeInfo, setActiveInfo ] = useState( null );\n  const [position, setPosition] = useState([0,0])\n  const [featuresArray, setFeaturesArray] = useState()\n  const [defaultColor, setDefaultColor] = useState(true)\n\n  async function getData() {\n    const response = await fetch('http://localhost:5000/mapview');\n    const jsonResponse = await response.json();\n    const teste = jsonResponse.features\n    var featuresArray = jsonResponse.features.slice(1,7)    // todo remove slice!\n    setFeaturesArray(featuresArray)\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n\n  const markerHtmlStyles = (color) => {\n    if (defaultColor == false) {\n      var iconColor = color\n    }\n    else{\n      iconColor = 'grey'\n    }\n    return `background-color: ${iconColor};\n    width: 1rem;\n    height: 1rem;\n    display: block;\n    left: -1.5rem;\n    top: -1.5rem;\n    position: relative;\n    border-radius: 3rem 3rem 0;\n    transform: rotate(45deg);\n    border: 1px solid #FFFFFF`\n  } \n\n  const icon = (color) => {\n    const obejctStyle = markerHtmlStyles(color)\n    const htmlString = `<span style=\"${obejctStyle}\" />`\n  return  divIcon({\n    className: \"my-custom-pin\",\n    iconAnchor: [0, 24],\n    labelAnchor: [-6, 0],\n    popupAnchor: [0, -36],\n    html: htmlString\n  })}\n\n  const switchColors = () => {\n    setDefaultColor(!defaultColor)\n  }\n\n\nreturn (<>\n\n    <button onClick={switchColors}> Switch </button>\n <MapContainer \n          center = {[8.382046, 11.6146463 ]}\n          center={position} \n            zoom = { 1 }\n          scrollWheelZoom = { true } \n      >\n      <TileLayer \n        attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n        url = 'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png'\n      />\n       <TileLayer \n          attribution = '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' \n          url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" \n        />\n   {featuresArray && featuresArray.map((featureObject, idx1) => { \n     return featureObject.geometry.coordinates.map((singleCoordinate, idx2) => {\n      const myid = idx1 + '_' + idx2 \n       return (<Marker       key={myid}  position={singleCoordinate}\n        icon= {icon(featureObject.properties.color)}\n         > \n            \n       </Marker>)\n      \n     }\n     )})} \n\n  </MapContainer> \n\n\n  </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}