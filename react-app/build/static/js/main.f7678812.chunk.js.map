{"version":3,"sources":["images/covid19.svg","App.js","reportWebVitals.js","index.js"],"names":["covidIcon","Icon","iconUrl","icon1","iconSize","App","useState","activeCovid","setActiveCovid","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","covidData","map","eachData","Marker","position","Latitude","Longitude","eventHandlers","click","icon","Id","Popup","onClose","Location","Total_Cases","New_Cases_Per_Day","Cases_Per_1_Million_People","Deaths","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mhNAAe,MAA0B,oC,OCOnCA,EAAY,IAAIC,OAAK,CACzBC,QAASC,EACTC,SAAU,CAAC,GAAI,MA0DFC,MAtDf,WACE,MAAwCC,mBAAU,MAAlD,mBAAQC,EAAR,KAAqBC,EAArB,KACA,OAEI,eAACC,EAAA,EAAD,CACIC,OAAW,CAAE,UAAW,WACxBC,KAAS,EACTC,iBAAoB,EAHxB,UAMA,cAACC,EAAA,EAAD,CACEC,YAAY,2LACZC,IAAM,8EAOLC,EAAUC,KAAI,SAAAC,GAAQ,OACtB,cAACC,EAAA,EAAD,CAEGC,SAAW,CAACF,EAASG,SAAUH,EAASI,WACxCC,cAAe,CACbC,MAAO,WACLhB,EAAeU,KAGnBO,KAAOzB,GAPFkB,EAASQ,OAWlBnB,GACA,cAACoB,EAAA,EAAD,CACEP,SAAW,CAAEb,EAAYc,SAAUd,EAAYe,WAC/CM,QAAS,WACPpB,EAAe,OAHnB,SAME,gCACE,6BAAMD,EAAYsB,WAClB,6DAAiCtB,EAAYuB,eAC7C,6DAAiCvB,EAAYwB,qBAC7C,6DAAiCxB,EAAYyB,8BAC7C,6DAAiCzB,EAAY0B,mBC7C1CC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f7678812.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/covid19.0ceb0aa4.svg\";","import {React, useState} from 'react'\nimport './App.css'\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport { Icon } from 'leaflet'\nimport covidData from './data.json'\nimport icon1 from './images/covid19.svg'\n\nconst covidIcon = new Icon({\n  iconUrl: icon1,\n  iconSize: [25, 25]\n})\n\n\nfunction App() {\n  const [ activeCovid, setActiveCovid ] = useState( null );\n  return (\n\n      <MapContainer \n          center = { [ 20.593683, 78.962883 ] }\n          zoom = { 5 }\n          scrollWheelZoom = { true } \n\n      >\n      <TileLayer \n        attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n        url = 'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png'\n      />\n\n       {/* <TileLayer \n          attribution = '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' \n          url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" \n        /> */}\n       { covidData.map(eachData => (\n         <Marker \n            key={eachData.Id} \n            position= {[eachData.Latitude, eachData.Longitude]}\n            eventHandlers={{\n              click: () => {\n                setActiveCovid(eachData)\n              }\n            }}\n            icon= {covidIcon}\n          />\n       ))}\n\n      { activeCovid && (\n        <Popup \n          position={ [ activeCovid.Latitude, activeCovid.Longitude ] }\n          onClose={()=>{\n            setActiveCovid(null)\n          }}\n        >\n          <div>\n            <h1>{ activeCovid.Location }</h1>\n            <p>Total cases:                { activeCovid.Total_Cases }</p>\n            <p>New cases (1 day*):         { activeCovid.New_Cases_Per_Day }</p>\n            <p>Cases per 1 million people: { activeCovid.Cases_Per_1_Million_People }</p>\n            <p>Deaths:                     { activeCovid.Deaths }</p>\n          </div>\n        </Popup>\n      )}\n\n      </MapContainer> \n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}